import javax.swing.*;
import java.io.*;
import java.util.Scanner;

public class Main extends javax.swing.JFrame {

    private int row = 0;

    private String [] HourArray = new String [30];
    private String [] MinuteArray = new String [30];
    private String [] EventArray = new String [30];

    public Main() {
        initComponents();

        Reminder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        EventCalender = new datechooser.beans.DateChooserPanel();
        EventFieldScroll = new javax.swing.JScrollPane();
        EventField = new javax.swing.JTextArea();
        EventTableScroll = new javax.swing.JScrollPane();
        EventsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        AddEventButton = new javax.swing.JButton();
        MainMenuButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        HourCombo = new javax.swing.JComboBox<>();
        MinuteCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ReminderLabel = new javax.swing.JLabel();
        UpcomingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calender");
        setBackground(new java.awt.Color(102, 102, 255));
        setUndecorated(false);
        setResizable(false);

        EventCalender.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
                new datechooser.view.appearance.ViewAppearance("custom",
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(0, 0, 0),
                                new java.awt.Color(0, 0, 255),
                                false,
                                true,
                                new datechooser.view.appearance.swing.ButtonPainter()),
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(0, 0, 0),
                                new java.awt.Color(0, 0, 255),
                                true,
                                true,
                                new datechooser.view.appearance.swing.ButtonPainter()),
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(0, 0, 255),
                                new java.awt.Color(0, 0, 255),
                                false,
                                true,
                                new datechooser.view.appearance.swing.ButtonPainter()),
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(128, 128, 128),
                                new java.awt.Color(0, 0, 255),
                                false,
                                true,
                                new datechooser.view.appearance.swing.LabelPainter()),
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(0, 0, 0),
                                new java.awt.Color(0, 0, 255),
                                false,
                                true,
                                new datechooser.view.appearance.swing.LabelPainter()),
                        new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 13),
                                new java.awt.Color(0, 0, 0),
                                new java.awt.Color(255, 0, 0),
                                false,
                                false,
                                new datechooser.view.appearance.swing.ButtonPainter()),
                        (datechooser.view.BackRenderer)null,
                        false,
                        true)));
        EventCalender.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                EventCalenderOnSelectionChange(evt);
            }
        });
        EventCalender.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                EventCalenderOnCommit(evt);
            }
        });

        EventField.setColumns(20);
        EventField.setRows(5);
        EventFieldScroll.setViewportView(EventField);

        EventsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {""},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null},
                        {null}
                },
                new String [] {
                        "Events this Day"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EventsTable.setGridColor(new java.awt.Color(255, 255, 255));
        EventsTable.setRowHeight(33);
        EventTableScroll.setViewportView(EventsTable);

        jLabel2.setText("*Select a date to add Event");

        AddEventButton.setText("Add Event");
        AddEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEventButtonActionPerformed(evt);
            }
        });

        MainMenuButton.setText("Main Menu");
        MainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Set Time:");

        HourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));

        MinuteCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel4.setText("Hour");

        jLabel5.setText("Minute");

        ReminderLabel.setText("Reminder: ");

        UpcomingLabel.setText("Upcoming Event will show up here");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(ReminderLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(UpcomingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(MainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(EventCalender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(EventFieldScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel2))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(AddEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(0, 7, Short.MAX_VALUE))
                                                                        .addComponent(jLabel3)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(HourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel4))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(jLabel5)
                                                                                        .addComponent(MinuteCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                                .addGap(15, 15, 15)
                                                .addComponent(EventTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(ReminderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(UpcomingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(MainMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(EventCalender, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(EventFieldScroll)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel2))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel5))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(HourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(MinuteCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(AddEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(EventTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void EventCalenderOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {

        ReadTableOnClick(setFileName());

        if (row!=0)
            row++;
    }

    private void AddEventButtonActionPerformed(java.awt.event.ActionEvent evt) {

        AddEvent();
    }

    private void MainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void EventCalenderOnCommit(datechooser.events.CommitEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton AddEventButton;
    private datechooser.beans.DateChooserPanel EventCalender;
    private javax.swing.JTextArea EventField;
    private javax.swing.JScrollPane EventFieldScroll;
    private javax.swing.JScrollPane EventTableScroll;
    private javax.swing.JTable EventsTable;
    private javax.swing.JComboBox<String> HourCombo;
    private javax.swing.JButton MainMenuButton;
    private javax.swing.JComboBox<String> MinuteCombo;
    private javax.swing.JLabel ReminderLabel;
    private javax.swing.JLabel UpcomingLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration

    public void AddEvent ()
    {
        HourArray[row] = HourCombo.getSelectedItem().toString();
        MinuteArray[row] = MinuteCombo.getSelectedItem().toString();
        EventArray[row] = EventField.getText();

        EventsTable.setValueAt(HourArray[row] + ":" + MinuteArray[row] + "       " + EventArray[row], row, 0);

        WriteTableAtFile(setFileName());

        row++;
    }

    public String setFileName ()
    {
        int date = EventCalender.getSelectedDate().getTime().getDate();
        int month = EventCalender.getSelectedDate().getTime().getMonth() + 1;
        int year = EventCalender.getSelectedDate().getTime().getYear() + 1900;

        return String.format("%s%s%s", year, month, date);
    }

    public void WriteTableAtFile(String fileName)
    {
        try (PrintWriter pw = new PrintWriter("src//companion//calender//"+fileName+"TableRow.txt"))
        {
            pw.println(String.valueOf(row));
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Ops! Data could not be Written!\nPlease Relaunch the Program",
                    "Data Creation Error",JOptionPane.WARNING_MESSAGE);
        }

        try (PrintWriter pw = new PrintWriter("src//companion//calender//"+fileName+"TableData.txt"))
        {
            for(int i=0; i <= row; i++)
            {
                pw.println(String.format("%s", HourArray[i]));
                pw.println(String.format("%s", MinuteArray[i]));
                pw.println(String.format("%s", EventArray[i]));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Ops! Data could not be Written!\nPlease Relaunch the Program",
                    "Data Creation Error",JOptionPane.WARNING_MESSAGE);
        }
    }

    public void ReadTableOnClick(String fileName)
    {
        for (int i=0; i<30; i++)
            EventsTable.setValueAt("", i, 0);

        File f1 = new File("src//companion//calender//"+fileName+"TableData.txt");
        File f2 = new File("src//companion//calender//"+fileName+"TableRow.txt");

        if (f2.exists())
        {
            try (Scanner sc = new Scanner(new File("src//companion//calender//"+fileName+"TableRow.txt")))
            {
                row = Integer.parseInt(sc.next());
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "Data could not be read!\nPlease Relaunch The Program",
                        "Data read error", JOptionPane.WARNING_MESSAGE);
            }
        }
        else
            row = 0;

        if(f1.exists())
        {
            try (Scanner sc = new Scanner(new File("src//companion//calender//"+fileName+"TableData.txt")))
            {
                for (int i = 0; i <= row; i++)
                {
                    HourArray[i] = sc.nextLine();
                    MinuteArray[i] = sc.nextLine();
                    EventArray[i] = sc.nextLine();

                    EventsTable.setValueAt(HourArray[i] + ":" + MinuteArray[i] + "       " + EventArray[i], i, 0);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "Data could not be read!\nPlease Relaunch The Program",
                        "Data read error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    public void Reminder ()
    {
        int day = EventCalender.getCurrent().getTime().getDate();
        int month = EventCalender.getCurrent().getTime().getMonth() + 1;
        int year = EventCalender.getCurrent().getTime().getYear() + 1900;

        for (int i=0; i<7; i++)
        {
            int dayRange = day + i;
            int monthRange = month;
            int yearRange = year;

            switch (month)
            {
                case 1:
                case 3:
                case 5:
                case 7:
                case 8:
                case 10:
                    if (dayRange>31)
                    {
                        dayRange = (dayRange % 10) - 1;
                        monthRange++;
                    }
                    break;

                case 12:
                    if (dayRange>31)
                    {
                        dayRange = (dayRange % 10) - 1;
                        monthRange = 1;
                        yearRange++;
                    }
                    break;


                case 4:
                case 6:
                case 9:
                case 11:
                    if (dayRange>30)
                    {
                        dayRange = dayRange % 10;
                        monthRange++;
                    }
                    break;

                case 2:
                    if (year%400==0 || year%4==0 && year%100!=0)
                    {
                        if (dayRange > 29)
                        {
                            dayRange = (dayRange % 10) + 1;
                            monthRange++;
                        }
                    }
                    else
                    {
                        if (dayRange > 28)
                        {
                            dayRange = (dayRange+1 % 10) + 1;
                            monthRange++;
                        }
                    }
                    break;
            }

            String fileName = yearRange + "" + monthRange + "" + dayRange;

            File f1 = new File("src//companion//calender//"+fileName+"TableData.txt");

            if(f1.exists())
            {
                try (Scanner sc = new Scanner(new File("src//companion//calender//" + fileName + "TableData.txt")))
                {
                    String H = sc.nextLine();
                    String M = sc.nextLine();
                    String E = sc.nextLine();

                    UpcomingLabel.setText("At  " + yearRange + "." + monthRange + "." + dayRange + "  " + H + ":" + M + "   Event: " + E);
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Data could not be read!\nPlease Relaunch The Program",
                            "Data read error", JOptionPane.WARNING_MESSAGE);
                }
                break;
            }
        }
    }
}
